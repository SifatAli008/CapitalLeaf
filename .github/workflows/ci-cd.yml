name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18.20.4'
  FRONTEND_DIR: './frontend'

jobs:
  # Lint and Test Job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm install
      
    - name: Install frontend dependencies
      run: cd ${{ env.FRONTEND_DIR }} && npm install
      
    - name: Run ESLint
      run: cd ${{ env.FRONTEND_DIR }} && npm run lint
      
    - name: Run TypeScript check
      run: cd ${{ env.FRONTEND_DIR }} && npx tsc --noEmit
      
    - name: Check for security vulnerabilities
      run: cd ${{ env.FRONTEND_DIR }} && npm audit --audit-level=moderate

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd ${{ env.FRONTEND_DIR }} && npm install
        
    - name: Build frontend
      run: cd ${{ env.FRONTEND_DIR }} && npm run build
      
    - name: Check if build directory exists
      run: |
        echo "Checking build directory..."
        ls -la ${{ env.FRONTEND_DIR }}/
        if [ -d "${{ env.FRONTEND_DIR }}/.next" ]; then
          echo "Build directory exists"
          ls -la ${{ env.FRONTEND_DIR }}/.next
        else
          echo "Build directory does not exist, checking for alternative build output..."
          find ${{ env.FRONTEND_DIR }} -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-files
        path: ${{ env.FRONTEND_DIR }}/.next
        retention-days: 7

  # Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ${{ env.FRONTEND_DIR }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ${{ env.FRONTEND_DIR }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd ${{ env.FRONTEND_DIR }} && npm install
        
    - name: Build application
      run: cd ${{ env.FRONTEND_DIR }} && npm run build
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: false
        temporaryPublicStorage: true